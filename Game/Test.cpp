//---------------------------------------------------------------------
//---------------------------------------------------------------------
//This file may be regarded as a black box where no change is needed
//---------------------------------------------------------------------
//---------------------------------------------------------------------
#include "Logic.h"
//---------------------------------------------------------------------
//---------------------------------------------------------------------
//			   TEST 1 - Logic::King_IsInCheck(int ply)
//---------------------------------------------------------------------
//---------------------------------------------------------------------
void Logic::Test_King_IsInCheck(){
		
	//	Test for Assignment 2.2
	
	//------------------------------
	int  N0 = 8;
	char STRING_0[] = "Basics";
    char GAMEPOS_0_N[8][8][16] = {
		//----------------Start
		"r n b q k b n r",
		"p p p p p p p p",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"P P P P P P P P",
		"R N B Q K B N R",
		//----------------Pawn
		"p p p p p p p p",
		"p p p p p p p p",
		"p p p p p p p p",
		"p p p * p * p p",
		"p p p p K p p p",
		"p p p p p p p p",
		"p p p p p p p p",
		"p p p p p p p p",
		//----------------
		"P P P P P P P P",
		"P P P P P P P P",
		"P P P P P P P P",
		"P P P P P P P P",
		"P P P P K P P P",
		"P P P P P P P P",
		"P P P P P P P P",
		"P P P P P P P P",
		//----------------King
		"k k k k k k k k",
		"k k k k k k k k",
		"* k k k k k k k",
		"k k k * * * k k",
		"k k k * K * k k",
		"k k k * * * k k",
		"k k k k k k k k",
		"k k k k k k k k",
		//----------------Rook
		"r r r r * r r r",
		"r r r r * r r r",
		"r r r r * r r r",
		"r r r r * r r r",
		"* * * * K * * *",
		"r r r r * r r r",
		"r r r r * r r r",
		"r r r r * r r r",
		//----------------Bishop
		"* b b b b b b b",
		"b * b b b b b *",
		"b b * b b b * b",
		"b b b * b * b b",
		"b b b b K b b b",
		"b b b * b * b b",
		"b b * b b b * b",
		"b * b b b b b *",
		//----------------Queen
		"* q q q * q q q",
		"q * q q * q q *",
		"q q * q * q * q",
		"q q q * * * q q",
		"* * * * K * * *",
		"q q q * * * q q",
		"q q * q * q * q",
		"q * q q * q q *",
		//----------------Knight
		"n n n n n n n n",
		"n n n n n n n n",
		"n n n * n * n n",
		"n n * n n n * n",
		"n n n n K n n n",
		"n n * n n n * n",
		"n n n * n * n n",
		"n n n n n n n n",
		//----------------
	};
	//----------------------------------------
	//----------------------------------------
	int  N1 = 10;
	char STRING_1[] = "Pawn and King";
    char GAMEPOS_1_Y[10][8][16] = {
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * p * * * *",
		"* * * * K * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * b * *",
		"* * * * K * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * K k * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * k * *",
		"* * * * K * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * k * * *",
		"* * * * K * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * k * * * *",
		"* * * * K * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * k K * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * K * * *",
		"* * * k * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * K * * *",
		"* * * * k * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * K * * *",
		"* * * * * k * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
	};
	//----------------------------------------
	//----------------------------------------
	int  N2 = 14;
	char STRING_2[] = "Rook";
    char GAMEPOS_2_Y[14][8][16] = {
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * K * * r",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * K * r *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * K r * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * r * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * K * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * r * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * K * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * r * * *",
		"* * * * * * * *",
		"* * * * K * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * r * * *",
		"* * * * K * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"r * * * K * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* r * * K * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * r * K * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * r K * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * K * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * r * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * K * * *",
		"* * * * * * * *",
		"* * * * r * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * K * * *",
		"* * * * r * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
	};
	//----------------------------------------
	//----------------------------------------
	int  N3 = 10;
	char STRING_3[] = "Rook Obstacle Same Color";
    char GAMEPOS_3_N[10][8][16] = {
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * K * p r",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * K p r *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * r * * *",
		"* * * * p * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * K * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * r * * *",
		"* * * * p * * *",
		"* * * * * * * *",
		"* * * * K * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * r * * *",
		"* * * * p * * *",
		"* * * * K * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"r p * * K * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* r p * K * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * r p K * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * K * * *",
		"* * * * * * * *",
		"* * * * p * * *",
		"* * * * r * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * K * * *",
		"* * * * p * * *",
		"* * * * r * * *",
		"* * * * * * * *",
		//----------------
	};
	//----------------------------------------
	//----------------------------------------
	int  N4 = 10;
	char STRING_4[] = "Rook Obstacle Opposite Color";
	char GAMEPOS_4_N[10][8][16] = {	
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * K * P r",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * K P r *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * r * * *",
		"* * * * P * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * K * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * r * * *",
		"* * * * P * * *",
		"* * * * * * * *",
		"* * * * K * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * r * * *",
		"* * * * P * * *",
		"* * * * K * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"r P * * K * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* r P * K * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * r P K * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * K * * *",
		"* * * * * * * *",
		"* * * * P * * *",
		"* * * * r * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * K * * *",
		"* * * * P * * *",
		"* * * * r * * *",
		"* * * * * * * *",
		//----------------
	};
	//----------------------------------------
	//----------------------------------------
	int  N5 = 13;
	char STRING_5[] = "Bishop";
    char GAMEPOS_5_Y[13][8][16] = {
		//----------------
		"* * * * * * * *",
		"* * * * * * * b",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * K * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * b *",
		"* * * * * * * *",
		"* * * * K * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * b * *",
		"* * * * K * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"b * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * K * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* b * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * K * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * b * * * * *",
		"* * * * * * * *",
		"* * * * K * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * b * * * *",
		"* * * * K * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * K * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* b * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * K * * *",
		"* * * * * * * *",
		"* * b * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * K * * *",
		"* * * b * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * K * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * b",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * K * * *",
		"* * * * * * * *",
		"* * * * * * b *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * K * * *",
		"* * * * * b * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
	};
	//----------------------------------------
	//----------------------------------------
	int  N6 = 9;
	char STRING_6[] = "Bishop Obstacle Same Color";
    char GAMEPOS_6_N[9][8][16] = {		
		//----------------
		"* * * * * * * *",
		"* * * * * * * b",
		"* * * * * * r *",
		"* * * * * * * *",
		"* * * * K * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * b *",
		"* * * * * r * *",
		"* * * * K * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"b * * * * * * *",
		"* r * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * K * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* b * * * * * *",
		"* * r * * * * *",
		"* * * * * * * *",
		"* * * * K * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * b * * * * *",
		"* * * r * * * *",
		"* * * * K * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * K * * *",
		"* * * * * * * *",
		"* * r * * * * *",
		"* b * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * K * * *",
		"* * * r * * * *",
		"* * b * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * K * * *",
		"* * * * * * * *",
		"* * * * * * r *",
		"* * * * * * * b",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * K * * *",
		"* * * * * r * *",
		"* * * * * * b *",
		"* * * * * * * *",
		//----------------
	};
	//----------------------------------------
	//----------------------------------------
	int N7 = 9;
	char STRING_7[] = "Bishop Obstacle Opposite Color";
    char GAMEPOS_7_N[9][8][16] = {	
		//----------------
		"* * * * * * * *",
		"* * * * * * * b",
		"* * * * * * B *",
		"* * * * * * * *",
		"* * * * K * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * b *",
		"* * * * * B * *",
		"* * * * K * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"b * * * * * * *",
		"* B * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * K * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* b * * * * * *",
		"* * B * * * * *",
		"* * * * * * * *",
		"* * * * K * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * b * * * * *",
		"* * * B * * * *",
		"* * * * K * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * K * * *",
		"* * * * * * * *",
		"* * B * * * * *",
		"* b * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * K * * *",
		"* * * B * * * *",
		"* * b * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * K * * *",
		"* * * * * * * *",
		"* * * * * * B *",
		"* * * * * * * b",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * K * * *",
		"* * * * * B * *",
		"* * * * * * b *",
		"* * * * * * * *",
		//----------------
	};
	//----------------------------------------
	//----------------------------------------
	int N8 = 8;
	char STRING_8[] = "Bishop Obstacle Opposite Color";
    char GAMEPOS_8_N[8][8][16] = {	
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * n *",
		"* * * * K * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * n * *",
		"* * * * * * * *",
		"* * * * K * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * n * * * *",
		"* * * * * * * *",
		"* * * * K * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * n * * * * *",
		"* * * * K * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * K * * *",
		"* * n * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * K * * *",
		"* * * * * * * *",
		"* * * n * * * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * K * * *",
		"* * * * * * * *",
		"* * * * * n * *",
		"* * * * * * * *",
		//----------------
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * K * * *",
		"* * * * * * n *",
		"* * * * * * * *",
		"* * * * * * * *",
		//----------------
	};
	//----------------------------------------
	//----------------------------------------
	char GAMEPOS_3Q_N[10][8][16];
	For (i, N3) For (x,8) For (y,16){
		GAMEPOS_3Q_N[i][x][y] = Test_R_2_Q(GAMEPOS_3_N[i][x][y]);
	}
	//----------------------------------------
	//----------------------------------------
	char GAMEPOS_4Q_N[10][8][16];
	For (i, N4) For (x,8) For (y,16){
		GAMEPOS_4Q_N[i][x][y] = Test_R_2_Q(GAMEPOS_4_N[i][x][y]);
	}
	//----------------------------------------
	//----------------------------------------
	char GAMEPOS_6Q_N[10][8][16];
	For (i, N6) For (x,8) For (y,16){
		GAMEPOS_6Q_N[i][x][y] = Test_B_2_Q(GAMEPOS_6_N[i][x][y]);
	}
	//----------------------------------------
	//----------------------------------------
	char GAMEPOS_7Q_N[10][8][16];
	For (i, N7) For (x,8) For (y,16){
		GAMEPOS_7Q_N[i][x][y] = Test_B_2_Q(GAMEPOS_7_N[i][x][y]);
	}
	//----------------------------------------
	//----------------------------------------
	
	printf("\n"); Print_Bar(); Print_Bar();
	bool ok = true;
	
	For (i,2){
		mIsWhite = bool(i);
		//Putting TestGamePosBatch(...) before && ok makes sure
		//TestGamePosBatch(...) is always evaluated
		//-------------------------------------------------------------
		ok = TestGamePosBatch(GAMEPOS_0_N, N0, STRING_0, false) && ok;
		ok = TestGamePosBatch(GAMEPOS_1_Y, N1, STRING_1, true)  && ok;
		ok = TestGamePosBatch(GAMEPOS_2_Y, N2, STRING_2, true)  && ok;
		ok = TestGamePosBatch(GAMEPOS_3_N, N3, STRING_3, false) && ok;
		ok = TestGamePosBatch(GAMEPOS_4_N, N4, STRING_4, false) && ok;
		ok = TestGamePosBatch(GAMEPOS_5_Y, N5, STRING_5, true)  && ok;
		ok = TestGamePosBatch(GAMEPOS_6_N, N6, STRING_6, false) && ok;
		ok = TestGamePosBatch(GAMEPOS_7_N, N7, STRING_7, false) && ok;
		ok = TestGamePosBatch(GAMEPOS_8_N, N8, STRING_8, true)  && ok;
		//-------------------------------------------------------------
		ok = TestGamePosBatch(GAMEPOS_3Q_N, N3, STRING_3, false) && ok;
		ok = TestGamePosBatch(GAMEPOS_4Q_N, N4, STRING_4, false) && ok;
		ok = TestGamePosBatch(GAMEPOS_6Q_N, N6, STRING_6, false) && ok;
		ok = TestGamePosBatch(GAMEPOS_7Q_N, N7, STRING_7, false) && ok;
		//-------------------------------------------------------------
	}
	
	if (ok) printf(" King_IsInCheck() STATUS: OK\n");
	else {
		Print_Bar();
		printf(" King_IsInCheck() STATUS: IN PROGRESS\n");
	}
	Print_Bar();
	Print_Bar();
	
}
//---------------------------------------------------------------------
//---------------------------------------------------------------------
bool Logic::TestGamePosBatch(char gp[][8][16], int N,
							 char s[], bool isInCheck){
	bool ok = true;
	//Putting TestGamePos(...) before && ok makes sure
	//TestGamePos(...) is always evaluated
	For (i, N) ok = TestGamePos(gp, i, s, isInCheck) && ok;
	return ok;
}
//---------------------------------------------------------------------
//---------------------------------------------------------------------
bool Logic::TestGamePos(char gp[][8][16], int index,
						char s[], bool isInCheck){
	int ply = 1 - int(mIsWhite);
	if (mIsWhite){
		For (x,FILES) For (y,RANKS){
		mGamePos[0].sq[x][y] = gp[index][RANKS_1-y][2*x];}
	}
	else {//Invert board
		For (x,FILES) For (y,RANKS){
			char p = gp[index][y][2*x];
			if (p != '*')
				if (p > 'a') p -= 32;//Black becomes white
				else p += 32;//White becomes black
			mGamePos[1].sq[x][y] = p;
		}
	}
	if (King_IsInCheck(ply) != isInCheck){
		Print_Bar();
		printf(" \"%s\" Test Idx %d:\n", s, index);
		if (mIsWhite) printf(" White ");
		else printf(" Black ");
		if (isInCheck) printf("King should be in CHECK\n");
		else printf("King should NOT be in CHECK\n");
		Print_Bar();
		Print_Board(false, ply);
		return false;
	}
	return true;
}
//---------------------------------------------------------------------
//---------------------------------------------------------------------
char Logic::Test_B_2_Q(char p){
	if (p == 'b') return 'q';
	if (p == 'B') return 'Q';
	return p;
}
//---------------------------------------------------------------------
//---------------------------------------------------------------------
char Logic::Test_R_2_Q(char p){
	if (p == 'r') return 'q';
	if (p == 'R') return 'Q';
	return p;
}
//---------------------------------------------------------------------
//---------------------------------------------------------------------
















//---------------------------------------------------------------------
//---------------------------------------------------------------------
//		        TEST 2 - Logic::OptChildOrder(int ply)
//---------------------------------------------------------------------
//---------------------------------------------------------------------
void Logic::Test_OptChildren(){
	
	//  Test for Assignment 2.3
	
    //------------------------------
	mOffensiveFactor = .1;
    //------------------------------Init Piece Values
	mPieceValue['*'] =    0.;
	mPieceValue['K'] = 1000.; mPieceValue['k'] = - mPieceValue['K'];
	mPieceValue['Q'] =    9.; mPieceValue['q'] = - mPieceValue['Q'];
	mPieceValue['R'] =    5.; mPieceValue['r'] = - mPieceValue['R'];
	mPieceValue['N'] =    3.; mPieceValue['n'] = - mPieceValue['N'];
	mPieceValue['B'] =    3.; mPieceValue['b'] = - mPieceValue['B'];
	mPieceValue['P'] =    1.; mPieceValue['p'] = - mPieceValue['P'];
	//------------------------------Square Values
	const float fileGrad[] = {.0, .1, .2, .3, .3, .2, .1, .0};
	For (x,FILES) mFileGrad[x] = fileGrad[x];
	For (y,RANKS) mRankGrad[y] = mOffensiveFactor * (float(y) - 3.5);
    //------------------------------
    char GP[][8][16] = {
        //----------------#0: c4b5 & c4b4
		"* * * R * * * *",
		"* * * * * * * *",
		"* * B * * k * *",
		"* * P * p * * *",
		"P * K * P n * P",
		"* * * * * * * *",
		"* * r * * * * *",
		"* * * * * * * *",
        //----------------#1: d5f6 & g5h5
		"* * r * * * * *",
		"* * * k * * * *",
		"* * * p r p * *",
		"* R * N * * R p",
		"p * P P P * * P",
		"P * * K * * * *",
		"P * * * * * * *",
		"* * * * * * * *",
        //----------------#2: e3f4 & d8e6
		"* * R N * * * *",
		"* * * * * * k *",
		"* * * * p p * *",
		"* * P * * p * p",
		"* * * * * r * *",
		"* * * * P P * *",
		"* * p * * * K *",
		"* * * * * * * *",
        //----------------#3: a4b4 & a4d1
		"* * * * * * * *",
		"* * * * * Q * *",
		"* * * * * * * *",
		"* * * * k * * p",
		"q P * * * * * *",
		"* * * P * * * *",
		"* * * R * P * *",
		"* * * * K R * *",
        //----------------#4: d8d2 & d8d3
		"r * b q k * * *",
		"* p * * p * * *",
		"* * * * * p * r",
		"p * * * * p * p",
		"P * p * * * * *",
		"* * * * * N * *",
		"* * * Q P P P P",
		"* * * R K B * R",
        //----------------#5: h1h2 & c6e7
		"* * * * k * * *",
		"* * * * p * * *",
		"* * N * * p * *",
		"* * P * * p * p",
		"r p p * * * * *",
		"* * * * P * * *",
		"* * * * * P * r",
		"* * * R * K * R",
        //----------------#6: f1g2 & b1b2
		"* * * * * * * *",
		"* * * * p k * *",
		"* * N * * p * *",
		"* * P * * p * p",
		"* * p * * * * P",
		"* * * * P P * *",
		"* p * * * * r *",
		"* R * * * K * *",
        //----------------#7: e6e1 & e6e2
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * q p * k",
		"* * P * * p * p",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * * K *",
		"* * * * * * * *",
        //----------------#8: f3e3 & f3g2
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * * p * k",
		"* * * * * p * p",
		"* * * * * * * *",
		"* * * * q K * *",
		"* * * * * * * *",
		"* * * * * * * *",	
        //----------------#9: f3h3 & b4e1
		"* * * * R * * *",
		"* * * * * * * *",
		"* * * * * * * *",
		"* * * * p k P *",
		"* b * p * * * B",
		"* * * * * r * P",
		"* * * * * * K *",
		"* * * * * * * *",	
        //----------------	
	};
	
    //------------------------------
	const int CHILDREN[] = {3, 34, 18, 18, 25, 27, 17, 25, 2, 24};

	const int AT_PLY[] = {134, 82, 92, 93, 29, 48, 76, 109, 114, 97};

	const char SC[][2][5] = {
		"c4b5", "c4b4", //#0
		"d5f6", "g5h5", //#1
		"e3f4", "d8e6", //#2
		"a4b4", "a4d1", //#3
		"d8d2", "d8d3", //#4
		"h1h2", "c6e7", //#5
		"f1g2", "b1b2", //#6
		"e6e1", "e6e2", //#7
		"f3e3", "f3g2", //#8
		"f3h3", "b4e1", //#9
	};
    //------------------------------
	const char CHILD[][35][5] = {
        //-------------------------------------#0
        "c4b5", "c4b4", "c4b3", "----", "----",
        "----", "----", "----", "----", "----",
        "----", "----", "----", "----", "----",
        "----", "----", "----", "----", "----",
        "----", "----", "----", "----", "----",
        "----", "----", "----", "----", "----",
        "----", "----", "----", "----", "----",
        //-------------------------------------#1
        "b5a5", "b5c5", "b5b4", "b5b3", "b5b2",
        "b5b1", "b5b6", "b5b7", "b5b8", "c4c5",
        "d3e3", "d3c3", "d3c2", "d3d2", "d3e2",
        "d5e7", "d5f6", "d5e3", "d5f4", "d5c7",
        "d5b6", "d5c3", "d5b4", "e4e5", "g5f5",
        "g5e5", "g5h5", "g5g4", "g5g3", "g5g2",
        "g5g1", "g5g6", "g5g7", "g5g8", "----",
		//-------------------------------------#2
		"c5c6", "c8b8", "c8a8", "c8c7", "c8c6",
		"d8e6", "d8f7", "d8c6", "d8b7", "e3e4",
		"e3f4", "g2h2", "g2h3", "g2g3", "g2f2",
		"g2f1", "g2g1", "g2h1", "----", "----",
		"----", "----", "----", "----", "----",
		"----", "----", "----", "----", "----",
		"----", "----", "----", "----", "----",
		//-------------------------------------#3
		"a4b3", "a4c2", "a4d1", "a4b5", "a4c6",
		"a4d7", "a4e8", "a4b4", "a4a3", "a4a2",
		"a4a1", "a4a5", "a4a6", "a4a7", "a4a8",
		"e5d6", "e5d4", "h5h4", "----", "----",
		"----", "----", "----", "----", "----",
		"----", "----", "----", "----", "----",
		"----", "----", "----", "----", "----",
		//-------------------------------------#4
		"a8b8", "a8a7", "a8a6", "b7b6", "b7b5",
		"c4c3", "c8d7", "c8e6", "d8c7", "d8b6",
		"d8d7", "d8d6", "d8d5", "d8d4", "d8d3",
		"d8d2", "e7e6", "e7e5", "e8f8", "e8f7",
		"f5f4", "h5h4", "h6g6", "h6h7", "h6h8",
		"----", "----", "----", "----", "----",
		"----", "----", "----", "----", "----",
		//-------------------------------------#5
		"c6d8", "c6e7", "c6d4", "c6e5", "c6b8",
		"c6a7", "c6b4", "c6a5", "d1c1", "d1b1",
		"d1a1", "d1e1", "d1d2", "d1d3", "d1d4",
		"d1d5", "d1d6", "d1d7", "d1d8", "e3e4",
		"f1g1", "f1e2", "f1e1", "f2f3", "f2f4",
		"h1g1", "h1h2", "----", "----", "----",
		"----", "----", "----", "----", "----",
		//-------------------------------------#6
		"b1a1", "b1c1", "b1d1", "b1e1", "b1b2",
		"c6d8", "c6e7", "c6d4", "c6e5", "c6b8",
		"c6a7", "c6b4", "c6a5", "e3e4", "f1g2",
		"f1e1", "f3f4", "----", "----", "----",
		"----", "----", "----", "----", "----",
		"----", "----", "----", "----", "----",
		"----", "----", "----", "----", "----",
		//-------------------------------------#7
		"e6f7", "e6g8", "e6d5", "e6c4", "e6b3",
		"e6a2", "e6d7", "e6c8", "e6d6", "e6c6",
		"e6b6", "e6a6", "e6e5", "e6e4", "e6e3",
		"e6e2", "e6e1", "e6e7", "e6e8", "f5f4",
		"h5h4", "h6h7", "h6g7", "h6g6", "h6g5",
		"----", "----", "----", "----", "----",
		"----", "----", "----", "----", "----",
		//-------------------------------------#8
		"f3e3", "f3g2", "----", "----", "----",
		"----", "----", "----", "----", "----",
		"----", "----", "----", "----", "----",
		"----", "----", "----", "----", "----",
		"----", "----", "----", "----", "----",
		"----", "----", "----", "----", "----",
		"----", "----", "----", "----", "----",
		//-------------------------------------#9
		"b4c3", "b4d2", "b4e1", "b4c5", "b4d6",
		"b4e7", "b4f8", "b4a3", "b4a5", "d4d3",
		"e5e4", "f3e3", "f3d3", "f3c3", "f3b3",
		"f3a3", "f3g3", "f3h3", "f3f2", "f3f1",
		"f3f4", "f5g6", "f5e4", "f5f4", "----",
		"----", "----", "----", "----", "----",
		"----", "----", "----", "----", "----",
        //-------------------------------------
	};
	
	//-------------------------------------
	//-------------------------------------
	printf("\n"); Print_Bar(); Print_Bar();
	bool ok = true;
	For (t,10){
		int ply = AT_PLY[t];
		mMove[ply].children = CHILDREN[t];
		For (i, CHILDREN[t]){
			mMove[ply].child[i][0] = CHILD[t][i][0] - 'a';
			mMove[ply].child[i][1] = CHILD[t][i][1] - '1';
			mMove[ply].child[i][2] = CHILD[t][i][2] - 'a';
			mMove[ply].child[i][3] = CHILD[t][i][3] - '1';
		}
		For (x,FILES) For (y,RANKS)
			mGamePos[ply].sq[x][y] = GP[t][RANKS_1-y][2*x];
		mIsWhite = !bool(ply%2);
		OptChildOrder(ply);
		For (i,2){
			bool a = 
			((SC[t][i][0] == (mMove[ply].child[i][0] + 'a')) &&
			 (SC[t][i][1] == (mMove[ply].child[i][1] + '1')) &&
			 (SC[t][i][2] == (mMove[ply].child[i][2] + 'a')) &&
			 (SC[t][i][3] == (mMove[ply].child[i][3] + '1')));
			ok = a && ok;
			if (!a){
				printf(" Test Idx: %d, Child Idx: %d,", t, i);
				printf(" Expected: %s,", SC[t][i]);
				printf(" Actual: ");
				Print_Child(i, ply);
				printf("\n");
			}
		}
	}
	if (!ok) Print_Bar();
	if (ok) printf(" OptChildOrder()  STATUS: OK\n");
	else printf(" OptChildOrder()  STATUS: IN PROGRESS\n");
	Print_Bar();
	Print_Bar();
	//-------------------------------------
	
}
//---------------------------------------------------------------------
//---------------------------------------------------------------------
















//---------------------------------------------------------------------
//---------------------------------------------------------------------
//        TEST 3 - Logic::ST2_BasicStats(bool disp, int ply)
//---------------------------------------------------------------------
//---------------------------------------------------------------------
void Logic::Test_ST2_BasicStats(){
	
	const char REF[][9][64] = {
		//---------------------------#0
		"Unknown Pieces         = 40",
		"Sealed Pieces          = 40",
		"Mobile Pieces          = 0",
		"Sealed Static Pieces   = 7",
		"Sealed Dynamic Pieces  = 33",
		"Unknown Dynamic Pieces = 33",
		"Unknown:          a b 8xc 5xd 4xe 4xf 4xg 3xh 2xi j k 6xl",
		"Sealed Static:    a 6xl",
		"Unknown Dynamic:  b 8xc 5xd 4xe 4xf 4xg 3xh 2xi j k",
		//---------------------------#1
		"Unknown Pieces         = 40",
		"Sealed Pieces          = 39",
		"Mobile Pieces          = 1",
		"Sealed Static Pieces   = 7",
		"Sealed Dynamic Pieces  = 32",
		"Unknown Dynamic Pieces = 33",
		"Unknown:          a b 8xc 5xd 4xe 4xf 4xg 3xh 2xi j k 6xl",
		"Sealed Static:    a 6xl",
		"Unknown Dynamic:  b 8xc 5xd 4xe 4xf 4xg 3xh 2xi j k",
		//---------------------------#2
		"Unknown Pieces         = 9",
		"Sealed Pieces          = 5",
		"Mobile Pieces          = 4",
		"Sealed Static Pieces   = 2",
		"Sealed Dynamic Pieces  = 3",
		"Unknown Dynamic Pieces = 7",
		"Unknown:          a d e 4xf g l",
		"Sealed Static:    a l",
		"Unknown Dynamic:  d e 4xf g",
		//---------------------------#3
		"Unknown Pieces         = 4",
		"Sealed Pieces          = 4",
		"Mobile Pieces          = 0",
		"Sealed Static Pieces   = 2",
		"Sealed Dynamic Pieces  = 2",
		"Unknown Dynamic Pieces = 2",
		"Unknown:          a d f l",
		"Sealed Static:    a l",
		"Unknown Dynamic:  d f",
		//---------------------------#4
		"Unknown Pieces         = 9",
		"Sealed Pieces          = 5",
		"Mobile Pieces          = 4",
		"Sealed Static Pieces   = 2",
		"Sealed Dynamic Pieces  = 3",
		"Unknown Dynamic Pieces = 7",
		"Unknown:          A D E 4xF G L",
		"Sealed Static:    A L",
		"Unknown Dynamic:  D E 4xF G",
		//---------------------------
	};

	const float P[][12][2] = {
		//-------------#0
		0.025, 0.000,
		0.025, 0.000,
		0.200, 0.000,
		0.125, 0.000,
		0.100, 0.000,
		0.100, 0.000,
		0.100, 0.000,
		0.075, 0.000,
		0.050, 0.000,
		0.025, 0.000,
		0.025, 0.000,
		0.150, 0.000,
		//-------------#1
		0.026, 0.000,
		0.025, 0.030,
		0.199, 0.242,
		0.124, 0.152,
		0.099, 0.121,
		0.099, 0.121,
		0.099, 0.121,
		0.075, 0.091,
		0.050, 0.061,
		0.025, 0.030,
		0.025, 0.030,
		0.154, 0.000,
		//-------------#2
		0.200, 0.000,
		0.000, 0.000,
		0.000, 0.000,
		0.086, 0.143,
		0.086, 0.143,
		0.343, 0.571,
		0.086, 0.143,
		0.000, 0.000,
		0.000, 0.000,
		0.000, 0.000,
		0.000, 0.000,
		0.200, 0.000,
		//-------------#3
		0.250, 0.000,
		0.000, 0.000,
		0.000, 0.000,
		0.250, 0.000,
		0.000, 0.000,
		0.250, 0.000,
		0.000, 0.000,
		0.000, 0.000,
		0.000, 0.000,
		0.000, 0.000,
		0.000, 0.000,
		0.250, 0.000,
		//-------------#4
		0.200, 0.000,
		0.000, 0.000,
		0.000, 0.000,
		0.086, 0.143,
		0.086, 0.143,
		0.343, 0.571,
		0.086, 0.143,
		0.000, 0.000,
		0.000, 0.000,
		0.000, 0.000,
		0.000, 0.000,
		0.200, 0.000,
		//-------------
	};
	
    //-----------------------------
    char ST_GP[][10][20] = {
		//--------------------
		"f c e g d d l a l c",
		"c f l f e d g l d g",
		"c h d j e i e b c i",
		"h c h g l c f k c l",
		"* * * * * * * * * *",
		"* * * * * * * * * *",
		"L C K F C L G H C H",
		"I C B E I E J D H C",
		"G D L G D E F L F C",
		"C L A L D D G E C F",
		//--------------------
		"f c e g d d l a l c",
		"c f l f e d g l d g",
		"c h d j e i e b c i",
		"h c h g l c f k c l",
		"* * * * * * * * * *",
		"* * * * * * * * * *",
		"L C K F C L G H C H",
		"I C B E I E J D H C",
		"G D L G D E F L F C",
		"C L A L D D G E C F",
		//--------------------
		"a l d e f * * * * *",
		"f f f g * * * * * *",
		"l l g * * * * * * *",
		"* * * * * * * * * *",
		"* * * * * * * * * *",
		"* * * * * * * * * *",
		"L C K F C L G H C H",
		"I C B E I E J D H C",
		"G D L G D E F L F C",
		"C L A L D D G E C F",
		//--------------------
		"a l d f * * * * * *",
		"* * * * * * * * * *",
		"* * * * * * * * * *",
		"* * * * * * * * * *",
		"* * * * * * * * * *",
		"* * * * * * * * * *",
		"L C K F C L G H C H",
		"I C B E I E J D H C",
		"G D L G D E F L F C",
		"C L A L D D G E C F",
		//--------------------
		"f c e g d d l a l c",
		"c f l f e d g l d g",
		"c h d j e i e b c i",
		"h c h g l c f k c l",
		"* * * * * * * * * *",
		"* * * * * * * * * *",
		"* * * * * * * * * *",
		"* * * * * * * G L L",
		"* * * * * * G F F F",
		"* * * * * F E D L A",
		//--------------------
	};
	
	bool ok = true;
	
	For (t,5){
		//-----------------------------
		if (t < 4) For (x,FILES) For (y,RANKS){
			mGamePos[0].sq[x][y] = ST_GP[t][RANKS_1-y][2*x];
			mGamePosStatus[0].sq[x][y] = SEALED;
		}
		else For (x,FILES) For (y,RANKS){
			mGamePos[1].sq[x][y] = ST_GP[t][RANKS_1-y][2*x];
			mGamePosStatus[1].sq[x][y] = SEALED;
		}
		//-----------------------------
		if (t == 1){
			mGamePosStatus[0].sq[0][8] = MOBILE;
		}
		else if (t == 2){
			For (x,10) mGamePosStatus[0].sq[x][8] = MOBILE;
			For (x,10) mGamePosStatus[0].sq[x][7] = KNOWN;
		}
		else if (t == 4){
			For (x,10) mGamePosStatus[1].sq[x][0] = SEALED;
			For (x,10) mGamePosStatus[1].sq[x][1] = MOBILE;
			For (x,10) mGamePosStatus[1].sq[x][2] = KNOWN;
		}
		//-----------------------------
		if (t < 4) ST2_BasicStats(DISP_OFF, 0);
		else ST2_BasicStats(DISP_OFF, 1);
		bool ok2 = true;
		char A = t < 4 ? 'a' : 'A';
		For (i,12) For (j,2){
			float d = mST2_StatusToProb4Piece[i+A][j] - P[t][i][j];
			if (fabs(d) > .0011) ok2 = false;
		}
		if (!ok2){
			//-----------------------------
			printf("\n"); Print_Bar(); Print_Bar(); Print_Bar();
			printf(" TEST %d: The Current Implementation of "
				   "ST2_BasicStats() Renders:\n", t);
			Print_Bar(); Print_Bar(); Print_Bar();
			if (t < 4) ST2_BasicStats(DISP_ON, 0);
			else ST2_BasicStats(DISP_ON, 1);
			
			//-----------------------------
			printf("\n"); Print_Bar(); Print_Bar(); Print_Bar();
			printf(" TEST %d: But Should have Rendered:\n", t);
			Print_Bar(); Print_Bar(); Print_Bar();
			For (i,6) printf("%s\n", REF[t][i]);
			Print_Bar();
			printf("%s\n", REF[t][6]); Print_Bar();
			printf("%s\n", REF[t][7]); Print_Bar();
			printf("%s\n", REF[t][8]); Print_Bar();
			//-----------------------------
			Print_Bar();
			float sum[2]; sum[0] = sum[1] = 0.f;
			For (j,12){
				char p = j + A;
				printf(" P(%c|SEALED) = %4.3f   P(%c|MOBILE) = %4.3f\n",
					   p, P[t][j][SEALED],
					   p, P[t][j][MOBILE]);
				For (s,2) sum[s] += P[t][j][s]; 
			}
			printf(" SUM           %4.3f   SUM           %4.3f\n",
				   sum[SEALED], sum[MOBILE]);
			//-----------------------------
			Print_Bar(); Print_Bar();
			//-----------------------------
		}
		ok = ok2 && ok;
		//-----------------------------
		//-----------------------------
	}
	
	printf("\n"); Print_Bar(); Print_Bar();
	if (ok) printf(" ST2_BasicStats()  STATUS: OK\n");
	else printf(" ST2_BasicStats()  STATUS: IN PROGRESS\n");
	Print_Bar(); Print_Bar();
	
}
//---------------------------------------------------------------------
//---------------------------------------------------------------------

















